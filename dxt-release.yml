name: Build and Release DXT Package

on:
  release:
    types: [published]

jobs:
  build-dxt:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Create DXT package structure
      run: |
        # Create the DXT package directory
        mkdir -p dxt-package/server
        
        # Copy source code
        cp -r src/ dxt-package/
        cp -r tests/ dxt-package/
        cp pyproject.toml dxt-package/
        cp uv.lock dxt-package/
        cp manifest.json dxt-package/
        cp README.md dxt-package/
        cp LICENSE dxt-package/
        
        # Install dependencies to server/lib for bundling
        cd dxt-package
        uv venv server/venv
        source server/venv/bin/activate
        uv pip install -e .
        
        # Create a more portable structure - copy installed packages to server/lib
        mkdir -p server/lib
        # Copy the installed packages to server/lib
        cp -r server/venv/lib/python*/site-packages/* server/lib/
        
        # Update manifest.json to use the bundled dependencies
        # Update the mcp_config to use the bundled environment
        cat > manifest.json << 'EOF'
        {
          "dxt_version": "0.1",
          "name": "spotify-mcp",
          "display_name": "Spotify MCP Server",
          "version": "0.2.0",
          "description": "MCP server for controlling Spotify playback, searching music, and managing playlists",
          "long_description": "A comprehensive MCP server that provides 8 tools for Spotify integration including playback control, music search, queue management, playlist operations, authentication handling, and enhanced search with Last.fm/MusicBrainz metadata enrichment.",
          "author": {
            "name": "Varun Srivastava",
            "email": "varun.neal@berkeley.edu"
          },
          "repository": {
            "type": "git",
            "url": "https://github.com/omniwaifu/spotify-mcp"
          },
          "homepage": "https://github.com/omniwaifu/spotify-mcp",
          "support": "https://github.com/omniwaifu/spotify-mcp/issues",
          "server": {
            "type": "python",
            "entry_point": "src/spotify_mcp/server.py",
            "mcp_config": {
              "command": "python",
              "args": [
                "${__dirname}/src/spotify_mcp/server.py"
              ],
              "env": {
                "PYTHONPATH": "${__dirname}/server/lib:${__dirname}/src",
                "SPOTIFY_CLIENT_ID": "${user_config.spotify_client_id}",
                "SPOTIFY_CLIENT_SECRET": "${user_config.spotify_client_secret}",
                "SPOTIFY_REDIRECT_URI": "${user_config.spotify_redirect_uri}",
                "LASTFM_API_KEY": "${user_config.lastfm_api_key}",
                "EXTERNAL_API_CALL_LIMIT": "${user_config.external_api_call_limit}"
              }
            }
          },
          "tools": [
            {
              "name": "SpotifyPlayback",
              "description": "Control Spotify playback (get current track, start/pause/skip)"
            },
            {
              "name": "SpotifySearch", 
              "description": "Search for tracks, albums, artists, or playlists on Spotify"
            },
            {
              "name": "SpotifyQueue",
              "description": "Manage the playback queue (get queue, add tracks)"
            },
            {
              "name": "SpotifyGetInfo",
              "description": "Get detailed information about Spotify items (track, album, artist, playlist)"
            },
            {
              "name": "SpotifyPlaylist",
              "description": "Manage Spotify playlists (list, get tracks, add/remove tracks, change details)"
            },
            {
              "name": "SpotifyAuthentication",
              "description": "Handle Spotify OAuth authentication flow"
            },
            {
              "name": "SpotifyEnhancedSearch",
              "description": "Enhanced search combining Spotify data with Last.fm/MusicBrainz metadata"
            },
            {
              "name": "SpotifySimilarArtists",
              "description": "Get similar artists using Last.fm collaborative filtering data"
            }
          ],
          "keywords": ["spotify", "music", "mcp", "playback", "streaming", "playlist"],
          "license": "MIT",
          "compatibility": {
            "platforms": ["darwin", "win32", "linux"],
            "runtimes": {
              "python": ">=3.12"
            }
          },
          "user_config": {
            "spotify_client_id": {
              "type": "string",
              "title": "Spotify Client ID",
              "description": "Your Spotify App Client ID from the Spotify Developer Dashboard",
              "sensitive": true,
              "required": true
            },
            "spotify_client_secret": {
              "type": "string", 
              "title": "Spotify Client Secret",
              "description": "Your Spotify App Client Secret from the Spotify Developer Dashboard",
              "sensitive": true,
              "required": true
            },
            "spotify_redirect_uri": {
              "type": "string",
              "title": "Spotify Redirect URI", 
              "description": "OAuth redirect URI (must match your Spotify App settings)",
              "default": "http://localhost:8888/callback",
              "required": true
            },
            "lastfm_api_key": {
              "type": "string",
              "title": "Last.fm API Key (Optional)",
              "description": "API key for enhanced metadata from Last.fm (optional, improves search results)",
              "sensitive": true,
              "required": false
            },
            "external_api_call_limit": {
              "type": "number",
              "title": "External API Call Limit",
              "description": "Maximum number of external API calls per enhanced search operation",
              "default": 3,
              "min": 1,
              "max": 10,
              "required": false
            }
          }
        }
        EOF
        
        # Clean up the venv since we copied to server/lib
        rm -rf server/venv
        
        # List contents for debugging
        echo "DXT package contents:"
        find . -type f | head -20
    
    - name: Create DXT package archive
      run: |
        cd dxt-package
        zip -r ../spotify-mcp-dxt-${{ github.event.release.tag_name }}.zip .
        cd ..
        
        # Show the archive info
        ls -la spotify-mcp-dxt-*.zip
        unzip -l spotify-mcp-dxt-*.zip | head -20
    
    - name: Upload DXT package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./spotify-mcp-dxt-${{ github.event.release.tag_name }}.zip
        asset_name: spotify-mcp-dxt-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip